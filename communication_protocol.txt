Client --> Server
-----------------
- URL-encoded list of parameters, i.e. param1=value1&param2=value2&...
- Parameter names may be repeated, e.g. repeated=value1&repeated=value2&...

- If a value STARTS with a tilde (~), then it has been encrypted by the client and must be decrypted before use
	- Ex: &param1=~AB127C8E...
- If a value ENDS with a tilde (~), then its return value should be returned to the client encrypted
	- Ex: &param1=IP~ (specifies that the returned value of "IP" should be encrypted)
- Checks for start/end tildes must occur in succession because a decrypted value (start tilde) may include an end tilde
- There may be only one of each start/end tilde per param/value pair

- Values may have several "parts", separated by double-colons (::)
	- Ex: &param1=valuepart1::valuepart2::valuepart3&...

- Values may include template markets in mustache syntax ({{template}}) that will be replaced by the preprocessor
	- Ex: &param1=ip::{{IP}} instructs the preprocessor to replace {{IP}} with the client's remote IP string

EXECUTION ORDER:
	- Call get() method analogous to webapp2.Request.get() method
		- We call the default webapp2.Request.get() method, which returns the value from the URL (or optionally a default value)
		- If the value starts with a tilde, decrypt it
		- Replace any mustaches with their respective values
		- Return the result
	- Call get_all() method analogous to webapp2.Request.get_all() method
		- We call the default webapp2.Request.get_all() method, which returns the values as a list
		- Iterate over the list
			- If an element starts with a tilde, decrypt it
			- Replace any mustaches with their respective values
		- Return the list


Server --> Client
-----------------
- JSON object
- Always has a single 'success' value, which is 'y' when the operation has been successful and an error message otherwise
- Remember that values mapped with end tildes must be encrypted before being sent
- Response otherwise depends on context


MUSTACHES
---------
{{IP}}		Client's remote IP (string)